package entites;

public class ListaDuplamenteEncadeada<T> {
    private No<T> header;
    private int tamanho;

    public ListaDuplamenteEncadeada() {
        this.header = new No<>(null);
        this.header.setProximo(null);
        this.header.setAnterior(null);
        this.tamanho = 0;
    }

    public void add(T elemento, int posicao) {
        if (posicao < 0 || posicao > tamanho) {
            throw new IllegalArgumentException("Posição inválida.");
        } else if (this.tamanho == 0 || posicao == tamanho) {
            addFim(elemento);
        } else if (posicao == 0) {
            addInicio(elemento);
        } else {
            int cont = 0;
            Iterador it = new Iterador(this.header.getProximo());
            No<T> element = new No<T>(elemento);

            while (it.hasNext()) {
                if (posicao != cont) {
                    it.next();
                    cont += 1;
                } else {
                    break;
                }
            }
            No<T> elementoList = it.getAtual();
            element.setProximo(elementoList);
            element.setAnterior(elementoList.getAnterior());
            ((No<T>) elementoList.getAnterior()).setProximo(element);
            elementoList.setAnterior((T) element);
            tamanho++;
        }
    }

    public void addInicio(T elemento) {
        No<T> novoNo = new No<>(elemento);
        novoNo.setProximo(header.getProximo());
        if (header.getProximo() != null) {
            header.getProximo().setAnterior((T) novoNo);
        }
        novoNo.setAnterior((T) header);
        header.setProximo(novoNo);
        tamanho++;
    }

    public void addFim(T elemento) {
        No<T> element = new No<T>(elemento);

        if (tamanho == 0) {
            header.setProximo(element);
            element.setAnterior((T) header);
            element.setProximo(null);
            tamanho++;
        } else {
            Iterador it = new Iterador(header.getProximo());

            while (it.hasNext()) {
                it.next();
            }
            No<T> elementList = it.getAtual();
            elementList.setProximo(element);
            element.setAnterior((T) elementList);
            element.setProximo(null);
            tamanho++;
        }
    }

    public boolean existeDado() {
        return tamanho > 0;
    }

    public Object recupera(int posicao) {
        if (this.tamanho == 0 || posicao < 0 || posicao >= this.tamanho) {
            System.out.println("A lista está vazia ou a posição é inválida!");
            return null;
        } else {
            Iterador it = new Iterador(this.header.getProximo());
            int i = 0;
            while (it.hasNext()) {
                if (i != posicao) {
                    it.next();
                    i++;
                } else {
                    break;
                }
            }
            return it.getAtual().getElemento();
        }
    }

    public void removeInicio() {
        if (this.tamanho == 0) {
            System.out.println("A lista está vazia!");
        } else {
            header.setProximo(header.getProximo().getProximo());
            if (header.getProximo() != null) {
                header.getProximo().setAnterior((T) header);
            }
            tamanho--;
        }
    }

    public void removeFim() {
        if (this.tamanho == 0) {
            System.out.println("A lista está vazia!");
        } else {
            Iterador it = new Iterador(header.getProximo());

            while (it.hasNext()) {
                it.next();
            }

            No<T> ultimo = it.getAtual();
            ((No<T>) ultimo.getAnterior()).setProximo(null);
            tamanho--;
        }
    }

    public void clear() {
        header.setProximo(null);
        tamanho = 0;
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        sb.append("ListaEncadeada [");
        No<T> current = header.getProximo();
        while (current != null) {
            sb.append(current.getElemento());
            if (current.getProximo() != null) {
                sb.append(" -> ");
            }
            current = current.getProximo();
        }
        sb.append("]");
        return sb.toString();
    }
}
